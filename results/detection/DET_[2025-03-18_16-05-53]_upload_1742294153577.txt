==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.1714329719543457 s ] : import re 

==> SAFE CODE [ 0.1719529628753662 s ] : from collections import Counter 

==> SAFE CODE [ 0.180800199508667 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.2374112606048584 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.1887681484222412 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.19055843353271484 s ] : self.logs = [] 

==> SAFE CODE [ 0.20315814018249512 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.18883562088012695 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.2617452144622803 s ] : def read_logs(self): 

==> SAFE CODE [ 0.22500920295715332 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.21465730667114258 s ] : try: 

==> SAFE CODE [ 0.20819497108459473 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.21100544929504395 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.21672797203063965 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.19306492805480957 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.21639037132263184 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.19882822036743164 s ] : return False 

==> SAFE CODE [ 0.20039010047912598 s ] : return True 

==> SAFE CODE [ 0.23575663566589355 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.18740606307983398 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.17638325691223145 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.18096113204956055 s ] : for log in self.logs: 

==> SAFE CODE [ 0.19718241691589355 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.17516255378723145 s ] : if match: 

==> SAFE CODE [ 0.17707324028015137 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.17653584480285645 s ] : status = match.group("status") 

==> SAFE CODE [ 0.17462825775146484 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.17935752868652344 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.20268464088439941 s ] : def display_results(self): 

==> SAFE CODE [ 0.17738103866577148 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.1829843521118164 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.23133587837219238 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.18394732475280762 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.18325209617614746 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.1989297866821289 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.19436216354370117 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.1870124340057373 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.19245243072509766 s ] : if __name__ == "__main__": 

