==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.20296788215637207 s ] : import re 

==> SAFE CODE [ 0.21161270141601562 s ] : from collections import Counter 

==> SAFE CODE [ 0.22703766822814941 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.23713397979736328 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.22770476341247559 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.20844483375549316 s ] : self.logs = [] 

==> SAFE CODE [ 0.20882821083068848 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.2143721580505371 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.2548985481262207 s ] : def read_logs(self): 

==> SAFE CODE [ 0.20208406448364258 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.23966288566589355 s ] : try: 

==> SAFE CODE [ 0.2103414535522461 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.2165381908416748 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.22270631790161133 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.2341601848602295 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.2262864112854004 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.23443198204040527 s ] : return False 

==> SAFE CODE [ 0.24220561981201172 s ] : return True 

==> SAFE CODE [ 0.24613571166992188 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.21684670448303223 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.2145235538482666 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.22644257545471191 s ] : for log in self.logs: 

==> SAFE CODE [ 0.21089625358581543 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.2121741771697998 s ] : if match: 

==> SAFE CODE [ 0.2235875129699707 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.20837783813476562 s ] : status = match.group("status") 

==> SAFE CODE [ 0.23255467414855957 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.2099003791809082 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.24340248107910156 s ] : def display_results(self): 

==> SAFE CODE [ 0.23119235038757324 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.2035355567932129 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.19966840744018555 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.23870468139648438 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.22041606903076172 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.21912431716918945 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.1950395107269287 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.21608209609985352 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.2146146297454834 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.23356223106384277 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.21018147468566895 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.2249741554260254 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.2155463695526123 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.19364285469055176 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 10.311962366104126 s 

Average runtime per snippet: 0.239813 s 

