==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.18720316886901855 s ] : import re 

==> SAFE CODE [ 0.181898832321167 s ] : from collections import Counter 

==> SAFE CODE [ 0.18830418586730957 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.22526311874389648 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.2432401180267334 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.20859265327453613 s ] : self.logs = [] 

==> SAFE CODE [ 0.2144792079925537 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.21142220497131348 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.2084050178527832 s ] : def read_logs(self): 

==> SAFE CODE [ 0.23126506805419922 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.20277690887451172 s ] : try: 

==> SAFE CODE [ 0.2151627540588379 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.2097458839416504 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.1904141902923584 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.20076560974121094 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.2202296257019043 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.17692804336547852 s ] : return False 

==> SAFE CODE [ 0.1792769432067871 s ] : return True 

==> SAFE CODE [ 0.20036721229553223 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.1871795654296875 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.17121577262878418 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.17221331596374512 s ] : for log in self.logs: 

==> SAFE CODE [ 0.16978073120117188 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.19546103477478027 s ] : if match: 

==> SAFE CODE [ 0.1861424446105957 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.1808760166168213 s ] : status = match.group("status") 

==> SAFE CODE [ 0.1789247989654541 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.2238767147064209 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.19568729400634766 s ] : def display_results(self): 

==> SAFE CODE [ 0.1783585548400879 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.20430493354797363 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.19759583473205566 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.18381977081298828 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.19427990913391113 s ] : print(f"{ip} - {count} requests") 

