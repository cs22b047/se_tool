==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.12566590309143066 s ] : import re 

==> SAFE CODE [ 0.13116765022277832 s ] : from collections import Counter 

==> SAFE CODE [ 0.13067007064819336 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.15821456909179688 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.13407516479492188 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.1331498622894287 s ] : self.logs = [] 

==> SAFE CODE [ 0.13829922676086426 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.13819313049316406 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.14612436294555664 s ] : def read_logs(self): 

==> SAFE CODE [ 0.12991762161254883 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.12829923629760742 s ] : try: 

==> SAFE CODE [ 0.13983368873596191 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.1315140724182129 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.13448762893676758 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.13321518898010254 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.1286938190460205 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.13035941123962402 s ] : return False 

==> SAFE CODE [ 0.13129973411560059 s ] : return True 

==> SAFE CODE [ 0.14626455307006836 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.1344468593597412 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.13235926628112793 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.13280749320983887 s ] : for log in self.logs: 

==> SAFE CODE [ 0.13085603713989258 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.13050580024719238 s ] : if match: 

==> SAFE CODE [ 0.13170218467712402 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.1375739574432373 s ] : status = match.group("status") 

==> SAFE CODE [ 0.13331174850463867 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.12988877296447754 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.148482084274292 s ] : def display_results(self): 

==> SAFE CODE [ 0.13141155242919922 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.13014674186706543 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.1314542293548584 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.13459420204162598 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.13078594207763672 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.13250255584716797 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.1329648494720459 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.1331319808959961 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.13349556922912598 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.13228464126586914 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.1429443359375 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.1928873062133789 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.20842456817626953 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.23637056350708008 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 6.733938217163086 s 

Average runtime per snippet: 0.156603 s 

