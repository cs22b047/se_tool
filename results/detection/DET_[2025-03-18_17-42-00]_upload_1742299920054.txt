==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.19563031196594238 s ] : import re 

==> SAFE CODE [ 0.20284748077392578 s ] : from collections import Counter 

==> SAFE CODE [ 0.20687270164489746 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.25764036178588867 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.20182371139526367 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.2011713981628418 s ] : self.logs = [] 

==> SAFE CODE [ 0.23549365997314453 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.23867154121398926 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.25723838806152344 s ] : def read_logs(self): 

==> SAFE CODE [ 0.21895647048950195 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.22222137451171875 s ] : try: 

==> SAFE CODE [ 0.23156952857971191 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.2212216854095459 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.17593955993652344 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.2254934310913086 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.2088930606842041 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.18544960021972656 s ] : return False 

==> SAFE CODE [ 0.1925342082977295 s ] : return True 

==> SAFE CODE [ 0.21686339378356934 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.21950650215148926 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.22511577606201172 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.23964381217956543 s ] : for log in self.logs: 

==> SAFE CODE [ 0.22620415687561035 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.20561504364013672 s ] : if match: 

==> SAFE CODE [ 0.22005319595336914 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.21078920364379883 s ] : status = match.group("status") 

==> SAFE CODE [ 0.22142505645751953 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.22284865379333496 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.2563488483428955 s ] : def display_results(self): 

==> SAFE CODE [ 0.2360999584197998 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.22237753868103027 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.21695756912231445 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.24313831329345703 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.21693634986877441 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.24087905883789062 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.22577595710754395 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.20148658752441406 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.2275707721710205 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.20705175399780273 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.21703839302062988 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.239793062210083 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.22010016441345215 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.21791672706604004 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 10.31440281867981 s 

Average runtime per snippet: 0.23987 s 

