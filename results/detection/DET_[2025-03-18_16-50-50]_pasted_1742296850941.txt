==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.23665761947631836 s ] : import re 

==> SAFE CODE [ 0.2567892074584961 s ] : from collections import Counter 

==> SAFE CODE [ 0.2262897491455078 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.30068063735961914 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.23661184310913086 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.2466597557067871 s ] : self.logs = [] 

==> SAFE CODE [ 0.2682154178619385 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.29740309715270996 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.3066849708557129 s ] : def read_logs(self): 

==> SAFE CODE [ 0.25505995750427246 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.25510644912719727 s ] : try: 

==> SAFE CODE [ 0.26515626907348633 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.27988743782043457 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.23889923095703125 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.26860857009887695 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.28875136375427246 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.23984026908874512 s ] : return False 

==> SAFE CODE [ 0.28656840324401855 s ] : return True 

==> SAFE CODE [ 0.2903766632080078 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.26080918312072754 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.2661752700805664 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.28253889083862305 s ] : for log in self.logs: 

==> SAFE CODE [ 0.27737927436828613 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.2913501262664795 s ] : if match: 

==> SAFE CODE [ 0.2875654697418213 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.2787282466888428 s ] : status = match.group("status") 

==> SAFE CODE [ 0.2624990940093994 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.24887704849243164 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.2827017307281494 s ] : def display_results(self): 

==> SAFE CODE [ 0.2771174907684326 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.289384126663208 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.2722141742706299 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.2715320587158203 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.2596158981323242 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.28047823905944824 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.24780821800231934 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.28517985343933105 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.27999162673950195 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.24472832679748535 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.2723217010498047 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.28841328620910645 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.28870201110839844 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.2978956699371338 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 12.53776478767395 s 

Average runtime per snippet: 0.291576 s 

