==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.2773761749267578 s ] : import re 

==> SAFE CODE [ 0.25803446769714355 s ] : from collections import Counter 

==> SAFE CODE [ 0.21034741401672363 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.304659366607666 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.30211377143859863 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.23231816291809082 s ] : self.logs = [] 

==> SAFE CODE [ 0.2797422409057617 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.27953100204467773 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.29374170303344727 s ] : def read_logs(self): 

==> SAFE CODE [ 0.27236342430114746 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.28101420402526855 s ] : try: 

==> SAFE CODE [ 0.2841341495513916 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.30321335792541504 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.2995316982269287 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.2977566719055176 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.2594308853149414 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.2550926208496094 s ] : return False 

==> SAFE CODE [ 0.2442457675933838 s ] : return True 

==> SAFE CODE [ 0.29143834114074707 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.2660791873931885 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.23006296157836914 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.2810087203979492 s ] : for log in self.logs: 

==> SAFE CODE [ 0.2644786834716797 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.2725510597229004 s ] : if match: 

==> SAFE CODE [ 0.25449180603027344 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.2700953483581543 s ] : status = match.group("status") 

==> SAFE CODE [ 0.27480578422546387 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.26181626319885254 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.2987520694732666 s ] : def display_results(self): 

==> SAFE CODE [ 0.286297082901001 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.2615494728088379 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.26233530044555664 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.28208088874816895 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.264995813369751 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.30483341217041016 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.27779269218444824 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.2829322814941406 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.26729774475097656 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.28289151191711426 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.24486994743347168 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.2680644989013672 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.2759838104248047 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.28977179527282715 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 12.63635778427124 s 

Average runtime per snippet: 0.293869 s 

