==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.23997735977172852 s ] : import re 

==> SAFE CODE [ 0.2557218074798584 s ] : from collections import Counter 

==> SAFE CODE [ 0.19197726249694824 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.2816805839538574 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.26190948486328125 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.25661516189575195 s ] : self.logs = [] 

==> SAFE CODE [ 0.2813575267791748 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.2676267623901367 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.3028397560119629 s ] : def read_logs(self): 

==> SAFE CODE [ 0.2296442985534668 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.2812337875366211 s ] : try: 

==> SAFE CODE [ 0.2862701416015625 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.24341964721679688 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.28775477409362793 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.2873551845550537 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.26714563369750977 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.2915213108062744 s ] : return False 

==> SAFE CODE [ 0.2662818431854248 s ] : return True 

==> SAFE CODE [ 0.2689378261566162 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.23653531074523926 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.23636126518249512 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.27814579010009766 s ] : for log in self.logs: 

==> SAFE CODE [ 0.2359628677368164 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.2804892063140869 s ] : if match: 

==> SAFE CODE [ 0.2686655521392822 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.250319242477417 s ] : status = match.group("status") 

==> SAFE CODE [ 0.2811248302459717 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.24817609786987305 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.2964448928833008 s ] : def display_results(self): 

==> SAFE CODE [ 0.2604804039001465 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.27778005599975586 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.28329968452453613 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.26930809020996094 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.26982712745666504 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.25293684005737305 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.27001285552978516 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.2735018730163574 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.2961134910583496 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.246779203414917 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.28672075271606445 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.2533538341522217 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.28249120712280273 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.2730834484100342 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 12.36377739906311 s 

Average runtime per snippet: 0.28753 s 

