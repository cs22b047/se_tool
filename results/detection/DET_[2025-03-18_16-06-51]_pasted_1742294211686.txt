==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.24809908866882324 s ] : import re 

==> SAFE CODE [ 0.27014756202697754 s ] : from collections import Counter 

==> SAFE CODE [ 0.18105077743530273 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.2905387878417969 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.23529982566833496 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.27325892448425293 s ] : self.logs = [] 

==> SAFE CODE [ 0.2506687641143799 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.2398390769958496 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.3295109272003174 s ] : def read_logs(self): 

==> SAFE CODE [ 0.2634255886077881 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.24859952926635742 s ] : try: 

==> SAFE CODE [ 0.31276559829711914 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.2547483444213867 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.2805209159851074 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.24047207832336426 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.25241589546203613 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.22431111335754395 s ] : return False 

==> SAFE CODE [ 0.2571067810058594 s ] : return True 

==> SAFE CODE [ 0.2517220973968506 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.22345829010009766 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.24827885627746582 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.2733614444732666 s ] : for log in self.logs: 

==> SAFE CODE [ 0.2694096565246582 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.2791714668273926 s ] : if match: 

==> SAFE CODE [ 0.194627046585083 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.18726873397827148 s ] : status = match.group("status") 

==> SAFE CODE [ 0.23158621788024902 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.18622851371765137 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.2926020622253418 s ] : def display_results(self): 

==> SAFE CODE [ 0.28786754608154297 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.2799868583679199 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.2291250228881836 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.2832348346710205 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.2565286159515381 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.22736263275146484 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.23460793495178223 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.21700334548950195 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.19501852989196777 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.22825837135314941 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.26378774642944336 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.25186824798583984 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.2902224063873291 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.30937790870666504 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 11.699177980422974 s 

Average runtime per snippet: 0.272074 s 

