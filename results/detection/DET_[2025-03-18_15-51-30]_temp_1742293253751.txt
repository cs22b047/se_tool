==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.22933053970336914 s ] : import re 

==> SAFE CODE [ 0.2413017749786377 s ] : from collections import Counter 

==> SAFE CODE [ 0.22710609436035156 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.2964634895324707 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.21183180809020996 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.2341928482055664 s ] : self.logs = [] 

==> SAFE CODE [ 0.23262739181518555 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.21605539321899414 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.1732163429260254 s ] : def read_logs(self): 

==> SAFE CODE [ 0.24814963340759277 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.23117899894714355 s ] : try: 

==> SAFE CODE [ 0.23633027076721191 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.2358689308166504 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.21733665466308594 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.2221052646636963 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.20447659492492676 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.23481154441833496 s ] : return False 

==> SAFE CODE [ 0.20878028869628906 s ] : return True 

==> SAFE CODE [ 0.26575708389282227 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.2483532428741455 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.2179248332977295 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.21921992301940918 s ] : for log in self.logs: 

==> SAFE CODE [ 0.24599981307983398 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.2328791618347168 s ] : if match: 

==> SAFE CODE [ 0.24985337257385254 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.19539809226989746 s ] : status = match.group("status") 

==> SAFE CODE [ 0.21888017654418945 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.23904871940612793 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.22355937957763672 s ] : def display_results(self): 

==> SAFE CODE [ 0.21708178520202637 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.21843791007995605 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.21319580078125 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.2350444793701172 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.231034517288208 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.21954870223999023 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.21174025535583496 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.23328280448913574 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.25287747383117676 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.2238905429840088 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.2010335922241211 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.23340415954589844 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.22303414344787598 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.212968111038208 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 10.6102614402771 s 

Average runtime per snippet: 0.24675 s 

