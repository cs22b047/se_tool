==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.2568323612213135 s ] : #include "ns3/core-module.h 

==> SAFE CODE [ 0.24635100364685059 s ] : #include "ns3/network-module.h 

==> SAFE CODE [ 0.17830634117126465 s ] : #include "ns3/internet-module.h 

==> SAFE CODE [ 0.21822500228881836 s ] : #include "ns3/point-to-point-module.h 

==> SAFE CODE [ 0.2382047176361084 s ] : #include "ns3/applications-module.h 

==> SAFE CODE [ 0.22224974632263184 s ] : #include "ns3/flow-monitor-module.h 

==> SAFE CODE [ 0.20114707946777344 s ] : #include "ns3/ipv4-global-routing-helper.h 

==> SAFE CODE [ 0.2185983657836914 s ] : #include "ns3/aodv-module.h" 

==> SAFE CODE [ 0.194777250289917 s ] : using namespace ns3; 

==> SAFE CODE [ 0.18395256996154785 s ] : using namespace std; 

==> SAFE CODE [ 0.1858057975769043 s ] : int main(int argc, char* argv[]) 

==> SAFE CODE [ 0.16834068298339844 s ] : { 

==> SAFE CODE [ 0.2081298828125 s ] : Time::SetResolution (Time::NS); 

==> SAFE CODE [ 0.26516127586364746 s ] : LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO); 

==> SAFE CODE [ 0.25582051277160645 s ] : LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO); 

==> SAFE CODE [ 0.24023222923278809 s ] : NodeContainer nodes; 

==> SAFE CODE [ 0.23380804061889648 s ] : nodes.Create(10); 

==> SAFE CODE [ 0.20675301551818848 s ] : PointToPointHelper p2p; 

==> SAFE CODE [ 0.20322394371032715 s ] : p2p.SetDeviceAttribute ("DataRate", StringValue ("10Mbps")); 

==> SAFE CODE [ 0.218658447265625 s ] : p2p.SetChannelAttribute ("Delay", StringValue ("2ms")); 

==> SAFE CODE [ 0.19614768028259277 s ] : NetDeviceContainer meshD; 

==> SAFE CODE [ 0.21221232414245605 s ] : for(uint32_t i=0 ; i<10;i++) 

==> SAFE CODE [ 0.22617173194885254 s ] : { 

==> SAFE CODE [ 0.23059797286987305 s ] : for(uint32_t j=i+1; j<10; j++) 

==> SAFE CODE [ 0.2207634449005127 s ] : { 

==> SAFE CODE [ 0.23392176628112793 s ] : NetDeviceContainer link = p2p.Install(nodes.Get(i) , nodes.Get(j)); 

==> SAFE CODE [ 0.2074122428894043 s ] : meshD.Add(link); 

==> SAFE CODE [ 0.21416783332824707 s ] : } 

==> SAFE CODE [ 0.23234105110168457 s ] : } 

==> SAFE CODE [ 0.22049689292907715 s ] : InternetStackHelper internet; 

==> SAFE CODE [ 0.17696070671081543 s ] : AodvHelper aodv; 

==> SAFE CODE [ 0.1859421730041504 s ] : Ipv4ListRoutingHelper list; 

==> SAFE CODE [ 0.16871428489685059 s ] : list.Add(aodv, 10); 

==> SAFE CODE [ 0.2031080722808838 s ] : internet.SetRoutingHelper(list); 

==> SAFE CODE [ 0.2462296485900879 s ] : internet.Install(nodes); 

==> SAFE CODE [ 0.2133016586303711 s ] : Ipv4AddressHelper address; 

==> SAFE CODE [ 0.20604157447814941 s ] : address.SetBase("10.1.1.0" , "255.255.255.0"); 

==> SAFE CODE [ 0.2222614288330078 s ] : Ipv4InterfaceContainer interfaces = address.Assign(meshD); 

==> SAFE CODE [ 0.19374346733093262 s ] : uint16_t port = 23; 

==> SAFE CODE [ 0.23525309562683105 s ] : Address hubLocalAddress (InetSocketAddress (Ipv4Address::GetAny (), port)); 

==> SAFE CODE [ 0.23877573013305664 s ] : PacketSinkHelper packetSinkHelper ("ns3::UdpSocketFactory", hubLocalAddress); 

==> SAFE CODE [ 0.19321608543395996 s ] : ApplicationContainer serverApp = packetSinkHelper.Install (nodes.Get(0)); 

==> SAFE CODE [ 0.2606985569000244 s ] : serverApp.Start(Seconds(1.0)); 

==> SAFE CODE [ 0.22352933883666992 s ] : serverApp.Stop(Seconds(60.0)); 

==> SAFE CODE [ 0.2582519054412842 s ] : OnOffHelper onOffHelper("ns3::UdpSocketFactory", Address()); 

==> SAFE CODE [ 0.22702383995056152 s ] : onOffHelper.SetAttribute("OnTime", StringValue ("ns3::ConstantRandomVariable[Constant=1]")); 

==> SAFE CODE [ 0.23775315284729004 s ] : onOffHelper.SetAttribute("OffTime", StringValue ("ns3::ConstantRandomVariable[Constant=0]")); 

==> SAFE CODE [ 0.22881412506103516 s ] : onOffHelper.SetAttribute ("PacketSize", UintegerValue(1024)); 

==> SAFE CODE [ 0.19773650169372559 s ] : onOffHelper.SetAttribute ("DataRate", DataRateValue(DataRate("40.96Kb/s"))); 

==> SAFE CODE [ 0.19228792190551758 s ] : ApplicationContainer clientapps; 

==> SAFE CODE [ 0.19360589981079102 s ] : for(uint32_t i=1;i<10;i++) 

==> SAFE CODE [ 0.23070549964904785 s ] : { 

==> SAFE CODE [ 0.23450088500976562 s ] : AddressValue remoteAddress(InetSocketAddress(interfaces.GetAddress(0),port)); 

==> SAFE CODE [ 0.213942289352417 s ] : onOffHelper.SetAttribute("Remote", remoteAddress); 

==> SAFE CODE [ 0.26427364349365234 s ] : clientapps.Add(onOffHelper.Install(nodes.Get(i))); 

==> SAFE CODE [ 0.21809935569763184 s ] : } 

==> SAFE CODE [ 0.223524808883667 s ] : clientapps.Start(Seconds(1.0)); 

==> SAFE CODE [ 0.18680429458618164 s ] : clientapps.Stop(Seconds(60.0)); 

==> SAFE CODE [ 0.17461180686950684 s ] : Ipv4GlobalRoutingHelper::PopulateRoutingTables(); 

==> SAFE CODE [ 0.15942668914794922 s ] : FlowMonitorHelper flowmonHelper; 

==> SAFE CODE [ 0.2531547546386719 s ] : Ptr<FlowMonitor> flowMonitor = flowmonHelper.InstallAll(); 

==> SAFE CODE [ 0.2668118476867676 s ] : p2p.EnablePcapAll("Mesh_tp"); 

==> SAFE CODE [ 0.2898674011230469 s ] : Simulator::Stop(Seconds(65.0)); 

==> SAFE CODE [ 0.22631001472473145 s ] : cout << "Running simulation\n"; 

==> SAFE CODE [ 0.20805716514587402 s ] : Simulator::Run(); 

==> SAFE CODE [ 0.24857425689697266 s ] : cout << "Simulation finished\n"; 

==> SAFE CODE [ 0.16659164428710938 s ] : flowMonitor->CheckForLostPackets(); 

==> SAFE CODE [ 0.21217966079711914 s ] : Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier>(flowmonHelper.GetClassifier()); 

==> SAFE CODE [ 0.19600772857666016 s ] : std::map<FlowId, FlowMonitor::FlowStats> stats = flowMonitor->GetFlowStats(); 

==> SAFE CODE [ 0.21072769165039062 s ] : for (auto& entry : stats) 

==> SAFE CODE [ 0.2472684383392334 s ] : { 

==> SAFE CODE [ 0.2062680721282959 s ] : Ipv4FlowClassifier::FiveTuple t = classifier->FindFlow(entry.first); 

==> SAFE CODE [ 0.19916582107543945 s ] : cout << "Flow: " << entry.first << " Source Address: " << t.sourceAddress << " Destination Address: " << t.destinationAddress << "\n"; 

==> SAFE CODE [ 0.2251124382019043 s ] : cout << "Source Port: " << t.sourcePort << " Destination Port: " << t.destinationPort << "\n"; 

==> SAFE CODE [ 0.22628426551818848 s ] : cout << "Total Packets Transmitted: " << entry.second.txPackets << "\n"; 

==> SAFE CODE [ 0.15121841430664062 s ] : cout << "Total Packets Received: " << entry.second.rxPackets << "\n"; 

==> SAFE CODE [ 0.1442563533782959 s ] : cout << "Total Bytes Transmitted: " << entry.second.txBytes << "\n"; 

==> SAFE CODE [ 0.19878768920898438 s ] : cout << "Total Bytes Received: " << entry.second.rxBytes << "\n"; 

==> SAFE CODE [ 0.15552496910095215 s ] : cout<<endl; 

==> SAFE CODE [ 0.18098092079162598 s ] : cout << "Packet Delivery Ratio: " << (static_cast<double>(entry.second.rxPackets) / entry.second.txPackets) * 100 << " %\n"; 

==> SAFE CODE [ 0.23456287384033203 s ] : cout << "Throughput: " << entry.second.rxBytes * 8.0 / (entry.second.timeLastRxPacket.GetSeconds() - entry.second.timeFirstRxPacket.GetSeconds()) / 1024 / 1024 << " Mbps\n"; 

==> SAFE CODE [ 0.2125241756439209 s ] : double delay = (entry.second.delaySum.GetSeconds() / entry.second.rxPackets); 

==> SAFE CODE [ 0.20076370239257812 s ] : cout << "Network Delay: " << delay << " seconds\n"; 

==> SAFE CODE [ 0.19526052474975586 s ] : cout << "Lost Packets: " << entry.second.lostPackets << "\n"; 

==> SAFE CODE [ 0.18263912200927734 s ] : if (entry.second.rxPackets > 0) 

==> SAFE CODE [ 0.1474473476409912 s ] : { 

==> SAFE CODE [ 0.14121150970458984 s ] : double averageRtt = entry.second.delaySum.GetSeconds() / entry.second.rxPackets; 

==> SAFE CODE [ 0.21838688850402832 s ] : std::cout << "Average RTT: " << averageRtt * 1000 << " ms\n"; 

==> SAFE CODE [ 0.21144819259643555 s ] : } 

==> SAFE CODE [ 0.14173102378845215 s ] : else 

==> SAFE CODE [ 0.15635132789611816 s ] : { 

==> SAFE CODE [ 0.15745759010314941 s ] : std::cout << "Average RTT: No packets received to calculate RTT.\n"; 

==> SAFE CODE [ 0.2030787467956543 s ] : } 

==> SAFE CODE [ 0.21836090087890625 s ] : cout<<endl; 

==> SAFE CODE [ 0.176926851272583 s ] : } 

==> SAFE CODE [ 0.22019124031066895 s ] : flowMonitor->SerializeToXmlFile("mesh.xml", true, true); 

==> SAFE CODE [ 0.1376035213470459 s ] : Simulator::Destroy(); 

==> SAFE CODE [ 0.19476008415222168 s ] : return 0; 

==> SAFE CODE [ 0.168870210647583 s ] : } 





=================>          DATASET SIZE         <=================

#DimTestSet: 99 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 99 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 22.568129539489746 s 

Average runtime per snippet: 0.227961 s 

