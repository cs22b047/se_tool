==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.164992094039917 s ] : import re 

==> SAFE CODE [ 0.1755976676940918 s ] : from collections import Counter 

==> SAFE CODE [ 0.179443359375 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.2117927074432373 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.18922138214111328 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.18044734001159668 s ] : self.logs = [] 

==> SAFE CODE [ 0.17641806602478027 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.1887531280517578 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.1927940845489502 s ] : def read_logs(self): 

==> SAFE CODE [ 0.17262768745422363 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.18845009803771973 s ] : try: 

==> SAFE CODE [ 0.21258974075317383 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.18034696578979492 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.1915571689605713 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.20094537734985352 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.2382359504699707 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.21808815002441406 s ] : return False 

==> SAFE CODE [ 0.21651554107666016 s ] : return True 

==> SAFE CODE [ 0.22826480865478516 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.1959540843963623 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.21629047393798828 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.22262883186340332 s ] : for log in self.logs: 

==> SAFE CODE [ 0.18880510330200195 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.21096444129943848 s ] : if match: 

==> SAFE CODE [ 0.19916272163391113 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.1993725299835205 s ] : status = match.group("status") 

==> SAFE CODE [ 0.2130751609802246 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.17980670928955078 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.19568157196044922 s ] : def display_results(self): 

==> SAFE CODE [ 0.18008732795715332 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.19888067245483398 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.17970848083496094 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.17712116241455078 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.17243337631225586 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.19158267974853516 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.17876172065734863 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.18761539459228516 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.1731579303741455 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.1865551471710205 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.21544265747070312 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.1833345890045166 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.17613601684570312 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.20933318138122559 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 9.368630647659302 s 

Average runtime per snippet: 0.217875 s 

