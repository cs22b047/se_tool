==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.16508769989013672 s ] : import re 

==> SAFE CODE [ 0.16439342498779297 s ] : from collections import Counter 

==> SAFE CODE [ 0.17092204093933105 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.21188139915466309 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.16585731506347656 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.16839909553527832 s ] : self.logs = [] 

==> SAFE CODE [ 0.1710646152496338 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.16511154174804688 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.18119525909423828 s ] : def read_logs(self): 

==> SAFE CODE [ 0.1720895767211914 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.17667150497436523 s ] : try: 

==> SAFE CODE [ 0.18049263954162598 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.17711472511291504 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.16800498962402344 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.1710042953491211 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.18685054779052734 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.18206024169921875 s ] : return False 

==> SAFE CODE [ 0.17842340469360352 s ] : return True 

==> SAFE CODE [ 0.205277681350708 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.18520832061767578 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.1949169635772705 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.18567514419555664 s ] : for log in self.logs: 

==> SAFE CODE [ 0.1791706085205078 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.18874764442443848 s ] : if match: 

==> SAFE CODE [ 0.17766880989074707 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.17471933364868164 s ] : status = match.group("status") 

==> SAFE CODE [ 0.18797516822814941 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.1973559856414795 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.19560599327087402 s ] : def display_results(self): 

==> SAFE CODE [ 0.19054675102233887 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.1989142894744873 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.21314620971679688 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.22834515571594238 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.22966361045837402 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.2055504322052002 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.19785857200622559 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.2128136157989502 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.22360610961914062 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.1949012279510498 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.2183208465576172 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.19278240203857422 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.19228196144104004 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.21722984313964844 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 9.180561542510986 s 

Average runtime per snippet: 0.213501 s 

