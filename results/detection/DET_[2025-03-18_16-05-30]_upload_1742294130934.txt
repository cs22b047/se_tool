==================>      SNIPPETS DETECTED      <========================
|                                                                       |
|           (!) VULN CODE : Vulnerable code snippets detected           |
|           ==> SAFE CODE : Safe code snippet                           |
|                                                                       |
|                 [XXX s] : Execution Time per snippet                  |
|                                                                       |
=========================================================================

==> SAFE CODE [ 0.21411919593811035 s ] : import re 

==> SAFE CODE [ 0.26321864128112793 s ] : from collections import Counter 

==> SAFE CODE [ 0.2100527286529541 s ] : class LogAnalyzer: 

==> SAFE CODE [ 0.34809255599975586 s ] : def __init__(self, log_file): 

==> SAFE CODE [ 0.30454015731811523 s ] : self.log_file = log_file 

==> SAFE CODE [ 0.24356865882873535 s ] : self.logs = [] 

==> SAFE CODE [ 0.2612285614013672 s ] : self.ip_counts = Counter() 

==> SAFE CODE [ 0.2599971294403076 s ] : self.status_counts = Counter() 

==> SAFE CODE [ 0.27364540100097656 s ] : def read_logs(self): 

==> SAFE CODE [ 0.2579481601715088 s ] : """Reads log file and stores each line in a list"" 

==> SAFE CODE [ 0.2759568691253662 s ] : try: 

==> SAFE CODE [ 0.26207971572875977 s ] : with open(self.log_file, "r", encoding="utf-8") as file: 

==> SAFE CODE [ 0.2438817024230957 s ] : self.logs = file.readlines() 

==> SAFE CODE [ 0.2633843421936035 s ] : print(f"Successfully read {len(self.logs)} log entries.") 

==> SAFE CODE [ 0.22687149047851562 s ] : except FileNotFoundError: 

==> SAFE CODE [ 0.2517838478088379 s ] : print("Error: Log file not found.") 

==> SAFE CODE [ 0.2681913375854492 s ] : return False 

==> SAFE CODE [ 0.2788667678833008 s ] : return True 

==> SAFE CODE [ 0.27168774604797363 s ] : def analyze_logs(self): 

==> SAFE CODE [ 0.2653083801269531 s ] : """Extracts IP addresses and status codes from logs"" 

==> SAFE CODE [ 0.24593496322631836 s ] : log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) .* "(?P<method>GET|POST|PUT|DELETE) .*" (?P<status>\d+)') 

==> SAFE CODE [ 0.2922370433807373 s ] : for log in self.logs: 

==> SAFE CODE [ 0.27584052085876465 s ] : match = log_pattern.search(log) 

==> SAFE CODE [ 0.27702903747558594 s ] : if match: 

==> SAFE CODE [ 0.25411152839660645 s ] : ip = match.group("ip") 

==> SAFE CODE [ 0.2435131072998047 s ] : status = match.group("status") 

==> SAFE CODE [ 0.2664515972137451 s ] : self.ip_counts[ip] += 1 

==> SAFE CODE [ 0.2745935916900635 s ] : self.status_counts[status] += 1 

==> SAFE CODE [ 0.2916569709777832 s ] : def display_results(self): 

==> SAFE CODE [ 0.188767671585083 s ] : """Displays extracted insights from logs"" 

==> SAFE CODE [ 0.23812103271484375 s ] : print("\n==== Log Analysis Report ====\n") 

==> SAFE CODE [ 0.28235888481140137 s ] : print("Top 5 IP Addresses:") 

==> SAFE CODE [ 0.2729787826538086 s ] : for ip, count in self.ip_counts.most_common(5): 

==> SAFE CODE [ 0.24299979209899902 s ] : print(f"{ip} - {count} requests") 

==> SAFE CODE [ 0.26386165618896484 s ] : print("\nHTTP Status Codes:") 

==> SAFE CODE [ 0.2793080806732178 s ] : for status, count in self.status_counts.items(): 

==> SAFE CODE [ 0.2995469570159912 s ] : print(f"Status {status}: {count} occurrences") 

==> SAFE CODE [ 0.2689645290374756 s ] : if __name__ == "__main__": 

==> SAFE CODE [ 0.3061187267303467 s ] : log_file_path = "server.log" # Change this to your log file path 

==> SAFE CODE [ 0.2860758304595947 s ] : analyzer = LogAnalyzer(log_file_path) 

==> SAFE CODE [ 0.27136683464050293 s ] : if analyzer.read_logs(): 

==> SAFE CODE [ 0.2890055179595947 s ] : analyzer.analyze_logs() 

==> SAFE CODE [ 0.2341606616973877 s ] : analyzer.display_results() 





=================>          DATASET SIZE         <=================

#DimTestSet: 43 



=================>    FINAL RESULTS DETECTION    <=================

#TotalVulnerabilities: 0 

#SafeCode: 43 

Vulnerability Rate: 0 % 



=================>        OWASP CATEGORIES       <=================

#Injection: 0 

#Cryptographic Failures: 0 

#Security Misconfiguration: 0 

#Broken Access Control: 0 

#Identification and Authentication Failures: 0 

#Security Logging and Monitoring Failures: 0 

#Insecure Design: 0 

#SSRF: 0 

#Software and Data Integrity Failures: 0 



=================>        EXECUTION TIME        <=================

Runtime: 12.249580383300781 s 

Average runtime per snippet: 0.284874 s 

